/**

@page GenericPropertyMapConceptPage Property Maps API 

The Property Maps API is provided by the
[Boost Property Map Library](https://www.boost.org/doc/libs/1_66_0/libs/property_map/doc/property_map.html)
and by the MEPP2 Generic Property Map Concept.

The Boost Property Map Library and its Property Map Concepts defines an
interface to store/retrieve data in a property map whose key is a mesh item
(vertex descriptor, halfedge descriptor, face descriptor...).

The MEPP2 Generic Property Map Concept provides:
- the pre-definition of standard property maps (vertex-color, face-normal...)
- a way to define non-standard property maps
- a container to store/retrieve all the property maps associated with a
  mesh

See also:
 - \ref ConceptsPage for a general picture on FEVV concepts
 - \ref DevelopersDesignGenericPropertyMapsPage "Generic property maps design notes"

<br>

@section GenericPropertyMapConcept Generic Property Map Concept

@subsection Introduction

The original need for what FEVV refers to as "generic" property maps arises
from contexts where one needs to have the warranty that storing/accessing
a property map associated to some mesh will function even if such property
map is not natively supported by the native mesh datastructure.
For example when using the native readers, the properties read from the mesh
file (like vertex color, vertex normal, face color, texture coordinates...)
are stored inside the datastructure itself.
But when using a generic reader, we don't have anymore access to the
datastructure internal storage.
"Generic" property maps provide such location for storing mesh properties
outside from any native datastructure.


Note that the geometry of a mesh (the coordinates of the vertices) is always
stored natively in the mesh datastructure (and thus is NOT a "generic"
property map).
The property map holding the geometry of a mesh can always be retrieved within
\code{.cpp}
auto pm = get(boost::vertex_point, mesh);
\endcode

Refer to the \ref DevelopersDesignGenericPropertyMapsPage "Generic property maps design notes" for more concerning the motivation and the implementation
design.

@subsection Definitions

`FEVV::PMap_traits< PropertyTag, MeshT>`
is the traits class that produces the type for a
[property map](http://www.boost.org/libs/property_map/doc/property_map.html)
object for a particular mesh type `MeshT`.

The property is specified by the `PropertyTag` template parameter.
By convention (in fact by construction) each `PropertyTag` (type) is
associated with a corresponding property enumerator (of type `PropertyTag`).
For convenience, and also by convention, a property name of
`<mesh_element>_<property_nature>` is associated with a the
`<mesh_element>_<property_nature>_t` `PropertyTag` (constructed by postponing a trailing `_t` as a short for type) where:
  - `<mesh_element>` is to be chosen among `vertex`, `halfedge` and `face`
  - `<property_nature>` is typically `normal`, `color`, `texcoord` (short
    for texture coordinate)...

For example the `PropertyTag` named `vertex_normal_t` is associated with
the property-type name of `"vertex_normal"` (see below for usage examples).

The most usual property tags are pre-defined in \ref FEVV/Wrappings/properties.h
 e.g.
  - `FEVV::vertex_normal_t` (associated to the `FEVV::vertex_normal` name)
  - `FEVV::vertex_texcoord_t` (associated to the `FEVV::vertex_texcoord` name)
  - `FEVV::vertex_color_t` (associated to the `FEVV::vertex_color` name)
  - `FEVV::halfedge_normal_t` (...)
  - `FEVV::halfedge_texcoord_t`
  - `FEVV::face_normal_t`
  - `FEVV::face_color_t`
  - `FEVV::texture_filename_t`
  - ...

Notes:
  - The `FEVV::PMap_traits` traits class can be seen as a direct use case
    (specialisation) of the
    [boost property map library](http://www.boost.org/doc/libs/1_66_0/libs/property_map/doc/property_map.html)
    on top of which is based.
  - the implementation of `PMap_traits` doesn't rely on the native (proper
    to each datastructure) property maps of the mesh datastructures.

`FEVV::PMapsContainer` is a type of container dedicated to the storage
of mesh property maps.
\ref FEVV/Wrappings/properties.h defines `FEVV::PMapsContainer` as
\code{.cpp}
typedef std::map<std::string, boost::any> PMapsContainer;
\endcode


@section PropertyMapAPI Property Map API

@subsection Notations

 - `PM` &nbsp;&nbsp; A type that is a model of `FEVV::PMap_traits`.
 - `pm` &nbsp;&nbsp; An object of type `PM`.
 - `pmaps_bag` &nbsp;&nbsp; An object of type `FEVV::PMapsContainer`.
 - `pmap_tag` &nbsp;&nbsp; A standard property map tag (e.g. `FEVV::vertex_normal`, `FEVV::face_color`...)
 - `PMap` &nbsp;&nbsp; A type that is a model of Boost Read/Write Property Map.
 - `pmap` &nbsp;&nbsp; An object of type PMap.
 - `key` &nbsp;&nbsp; An object of type boost::property_traits<PMap>::key_type.
 - `val` &nbsp;&nbsp; An object of type boost::property_traits<PMap>::value_type.
 - `M` &nbsp;&nbsp; A type that is a model of mesh (e.g. `CGAL::Surface_mesh< >`,
   `CGAL::Polyhedron_3< , >`, `OpenMesh::PolyMesh_ArrayKernelT< >;`).
 - m &nbsp;&nbsp; An object of type `M`.

@subsection AssociatedTypes Associated types

| Type               | Reference         | Description          |
|--------------------|-------------------|----------------------|
| Key Type   | boost::property_traits<PMap>::key_type   | The type of the property map key (e.g. vertex_descriptor, face_descriptor...) |
| Value Type | boost::property_traits<PMap>::value_type | The type of the data stored in the property map. |


@subsection ValidExpressions Valid expressions

| Expression | Returns | Description  |
|------------|---------|--------------|
| Storing/retrieving data in a property map ([Boost Read/Write Property Map concept](https://www.boost.org/doc/libs/1_66_0/libs/property_map/doc/ReadWritePropertyMap.html)) |
| get(pmap, key) | value_type | Get the value associated with the key. |
| put(pmap, key, val) | void | Assign val to the property associated with key. |


TODO TODO TODO TODO





<b>Associated types</b>

| Type               | Reference         | Description          |
|--------------------|-------------------|----------------------|
| `PM::pmap_type`    | e.g. \ref _PMap_traits::pmap_type | The type stored within the property map of type PM. |



<b>Property maps related valid expressions</b>

| Expression         | Returns              | Description  |
|--------------------|----------------------|--------------|
| `make_property_map(pmap_name, m)`            | `PM`     | Constructs and return a property map named `pmap_name` associated to the `m` mesh instance. |
| `has_map(pmaps_bag, pmap_name)`              | `bool`   | Returns `true` when the `pmaps_bag` property map bag holds a property map named `pmap_name` (e.g. `vertex_normal`, `face_color`...), `false` otherwise |
| `put_property_map(pmap_name, m, pmaps_bag, pm)`  | `void` | Stores a weak reference to property map `pm` (that is associated to `m` mesh instance) within the `pmaps_bag` property map bag. |
| `get_property_map(pmap_name, m, pmaps_bag)`  | `PM`     | Returns the property map named `pmap_name` associated to the `m` mesh instance and held within `pmaps_bag` property maps bag. |

#### Create, store and retrieve a standard generic property map

\code{.cpp}
// example: create a standard property map to store a color per vertex

// defines vertex_color_map as the property map type designated to hold/store
// colors at (each) vertex of a mesh to type MeshT.
using vertex_color_map = typename FEVV::PMap_traits<FEVV::vertex_color_t, MeshT>::pmap_type;

vertex_color_map vertex_color_pm = make_property_map(FEVV::vertex_color, g);

// store the property map in an existing FEVV::PMapsContainer
FEVV::PMapsContainer pmaps_bag;     // property maps container
put_property_map(FEVV::vertex_color, g, pmaps_bag, vertex_color_pm);

// later retrieve the property map from the container
auto vertex_color_pm = get_property_map(FEVV::vertex_color, g, pmaps_bag);
\endcode

#### Create, store and retrieve a non standard property map
A mechanism is provided to extend the FEVV defined standard property maps (the
property tags that are defined in \ref FEVV/Wrappings/properties.h).
It allows to create new "non-standard" property maps, to store user defined properties, in a generic way.
For example, a property map may be needed inside a filter to temporary
store some value attached to the vertices.

\code{.cpp}
// example: create a user defined property map to store a label per face

// defines face_label_pmap_type as the property map type designated to
// hold/store a label (string) at (each) face of a mesh to type MeshT.
typedef  std::string                                   value_type;
typedef  typename FEVV::Face_pmap<MeshT, value_type>   face_label_pmap_type;

face_label_pmap_type  face_label_pmap;
face_label_pmap = FEVV::make_face_property_map<MeshT, value_type>(Mesh);

// store the property map in an existing FEVV::PMapsContainer
FEVV::PMapsContainer pmaps_bag;     // property maps container
pmaps_bag["f:label"] = face_label_pmap;

// later retrieve the property map from the container
// explicit cast needed here
face_label_pmap_type pm = boost::any_cast<face_label_pmap_type>(pmaps_bag.at("f:label"));
\endcode

*/
