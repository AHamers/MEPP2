/**

@page GeometryConceptPage Geometry concept


<b>Introduction</b>
The Geometry concept can be thought as capturing the notions
of an [affine space](https://en.wikipedia.org/wiki/Affine_space)
(including its [associated vector space](https://en.wikipedia.org/wiki/Affine_space#Definition)).

<b>Associated types</b>

| Type               | Reference         | Description          |
|--------------------|-------------------|----------------------|
| `G::Scalar`        | [Affine coordinates](https://en.wikipedia.org/wiki/Affine_space#Affine_coordinates) | A type used to represent the coordinate of a `Point`. |
| `G::Point`         | [Point of affine space](https://en.wikipedia.org/wiki/Affine_space#Definition)  | The type "aggregating" `Scalar` coordinates. |
| `G::Vector`        | [Affine "substraction"](https://en.wikipedia.org/wiki/Affine_space#Subtraction_and_Weyl.27s_axioms) | The type of an element of the associated vector space. |

<b>Notations</b>
 - `G` A type that is a model of `Geometry`.
 - `gt` An object of type `G`.
 - `p`,`q`, `r`  Objects of type `Point`.
 - `x`, `y`, `z` Objects of type `Scalar`
 - `v`, `u` Objects of type `Vector`

<b>Geometry related valid expressions</b> (ON GOING WORK: refer to `Geometry_traits`)
|      Expression          | Returns  | Description           |
|--------------------------|----------|-----------------------|
| `Point(x, y, z)`         | `Point`  | Constructor of the `Point` defined its respective given coordinates.|
| `q(p)`                   | `Point`  | `Point` [copy constructor](http://www.boost.org/doc/libs/1_58_0/libs/utility/CopyConstructible.html).|
| `ORIGIN`                 | `Point`  | The point at the origin.                |
| `gt.get_x(p)`            | `Scalar` | Returns the 1st coordinate of point `p`.|
| `gt.get_y(p)`            | `Scalar` | Returns the 2nd coordinate of point `p`.|
| `gt.get_z(p)`            | `Scalar` | Returns the 3rd coordinate of point `p`.|
| `Vector(x, y, z)`        | `Vector` | Constructor of the `Vector` defined its respective given coordinates.|
| `u(v)`                   | `Vector` | `Vector` [copy constructor](http://www.boost.org/doc/libs/1_58_0/libs/utility/CopyConstructible.html).|
| `NULL_VECTOR`            | `Vector` | The zero length vector.                 |
| `v[0]`                   | `Scalar` | Returns the 1st coordinate of vector `v` (read only).|
| `v[1]`                   | `Scalar` | Returns the 2nd coordinate of vector `v` (read only).|
| `v[2]`                   | `Scalar` | Returns the 3rd coordinate of vector `v` (read only).|
| `gt.normalize(v)`        | `Vector` | Returns the normalization of vector 'v'.|
| `gt.length2(v)`          | `Scalar` | Returns the square of the length of vector `v`.|
| `gt.length(v)`           | `Scalar` | Returns the length of vector `v`.|
| `gt.length(p, q)`        | `Scalar` | Returns the distance between points `p` and `q`.|
| `gt.normal(p, q, r)`     | `Vector` | Returns a vector that is normal to the plane passing through points `p`, `q` and `r`.|
| `gt.unit_normal(p, q, r)`| `Vector` | Returns a unit vector that is normal to the plane passing through points `p`, `q` and `r`.|
| `gt.add(u, v)`           | `Vector` | Returns the sum of vectors `u` and `v`.|
| `gt.add_p(p, v)`         | `Point`  | Returns the sum of point `p` and vector `v`.|
| `gt.sub_p(p, v)`         | `Point`  | Returns the sum of point `p` and the opposite of vector `v`.|
| `gt.sub(p, q)`           | `Vector` | Returns the vector from point `p` to point `q`.|
| `gt.scalar_mult(v, s)`   | `Vector` | Returns the multiplication of vector `v` by scalar `s`.|
| `gt.scalar_mult(s, v)`   | `Vector` | Returns the multiplication of vector `v` by scalar `s`.|
| `gt.dot_product(u, v)`   | `Scalar` | Returns the dot product of vectors `u` and `v`.|
| `gt.cross_product(u, v)` | `Vector` | Returns the cross product of vectors `u` and `v`.|

Notes:
 - The concept checking tests \ref Testing/Concepts/GeometryConceptCheck.h
   (you need to follow the link to the source on that page)
   of the \ref Geometry_traits illustrate all above expressions.
 - Refer to \ref Geometry_traits_documentation_dummy for implementation details
 - The current implementation misses to enable the following expressions
   - `p + q` which returns a Point (because it is hard to implement as CGAL wrappers ?)
   - `p - q` which returns a Vector
   - `p + v` which returns a Point

<b>Relating meshes with "their" geometry</b>

The following code snippet (refer to
<a href=accessing__geometry_8cpp_source.html>Examples/OpenMesh/accessing_geometry.cpp</a>) illustrates how to "walk" on the vertices geometries of a given
mesh :
\snippet OpenMesh/accessing_geometry.cpp Snippet Accessing Geometry

<b>Design notes</b>:
 - Although foreseen at some point, the `next(v, e, g)` and `prev(v, e, g)`
   expresssions were eventually disregarded since their result can be obtained
   through other means.
 - `remove_out_edge_if(u, p, g)` and `remove_out_edge_if(u, p, g)` (mutability)
   were droped because edges are non oriented.

\todo
  The expression `Point( Scale, Scale, Scale)` is missing from
  \ref Testing/Concepts/GeometryConceptCheck.h. Yet it is illustrated
  \ref FEVV/Filters/Generic/translation.hpp (in `translate()` free
  templated function).


This documentation generated from GeometryConcept.dox file.

*/
